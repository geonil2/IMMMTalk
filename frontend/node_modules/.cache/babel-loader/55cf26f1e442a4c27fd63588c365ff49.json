{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from 'redux-logger';\nimport reducer from './reducers/index';\nimport { useSelector } from \"react-redux\";\nconst initialState = {};\nconst middleware = [logger, ...getDefaultMiddleware()];\nconst store = configureStore({\n  reducer,\n  middleware,\n  devTools: process.env.NODE_ENV !== \"production\",\n  preloadedState: initialState\n});\nexport const useAppSelectore = useSelector;\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","logger","reducer","useSelector","initialState","middleware","store","devTools","process","env","NODE_ENV","preloadedState","useAppSelectore"],"sources":["/Users/kimgeonil/Desktop/project/redux-toolkit/src/redux/store.ts"],"sourcesContent":["import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport logger from 'redux-logger';\nimport reducer from './reducers/index';\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\n\nconst initialState = {};\nconst middleware = [logger, ...getDefaultMiddleware()];\n\nconst store = configureStore({\n    reducer,\n    middleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n    preloadedState: initialState,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppSelectore: TypedUseSelectorHook<RootState> = useSelector;\n\nexport default store;\n\n"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,oBAAxB,QAAmD,kBAAnD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAA8BC,WAA9B,QAAgD,aAAhD;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,UAAU,GAAG,CAACJ,MAAD,EAAS,GAAGD,oBAAoB,EAAhC,CAAnB;AAEA,MAAMM,KAAK,GAAGP,cAAc,CAAC;EACzBG,OADyB;EAEzBG,UAFyB;EAGzBE,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAHV;EAIzBC,cAAc,EAAEP;AAJS,CAAD,CAA5B;AAUA,OAAO,MAAMQ,eAAgD,GAAGT,WAAzD;AAEP,eAAeG,KAAf"},"metadata":{},"sourceType":"module"}