{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { DummyService } from \"../../services/dummyService\";\nconst initialState = {\n  isLoading: false,\n  error: '',\n  employer: {\n    id: '',\n    employee_name: '',\n    employee_salary: '',\n    employee_age: '',\n    profile_image: ''\n  },\n  employers: [{\n    id: '',\n    employee_name: '',\n    employee_salary: '',\n    employee_age: '',\n    profile_image: ''\n  }]\n};\nexport const employeeSlice = createSlice({\n  name: 'EMPLOYEE',\n  initialState,\n  reducers: {\n    removeEmployee(state, action) {\n      const newEmployers = state.employers.filter(employer => employer.employee_name !== action.payload);\n      state.employers = newEmployers;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(DummyService.getEmployers.pending, state => {\n      state.isLoading = true;\n      state.employers = initialState.employers;\n    }).addCase(DummyService.getEmployers.fulfilled, (state, action) => {\n      state.isLoading = false;\n      console.log(action.payload);\n      state.employers = action.payload;\n    }).addCase(DummyService.getEmployers.rejected, (state, action) => {\n      state.isLoading = false;\n      state.employers = initialState.employers;\n      state.error = action.payload;\n    }).addCase(DummyService.getEmployer.pending, (state, action) => {\n      state.isLoading = true;\n      state.employers = initialState.employers;\n    });\n  }\n});\nexport const {\n  removeEmployee\n} = employeeSlice.actions;","map":{"version":3,"names":["createSlice","DummyService","initialState","isLoading","error","employer","id","employee_name","employee_salary","employee_age","profile_image","employers","employeeSlice","name","reducers","removeEmployee","state","action","newEmployers","filter","payload","extraReducers","builder","addCase","getEmployers","pending","fulfilled","console","log","rejected","getEmployer","actions"],"sources":["/Users/kimgeonil/Desktop/project/redux-toolkit/src/redux/slices/employeeSlice.ts"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nimport {DummyService} from \"../../services/dummyService\";\n\ninterface Employer {\n    id: string,\n    employee_name: string,\n    employee_salary: string,\n    employee_age: string,\n    profile_image: string\n}\n\ntype EmployeeData = {\n    isLoading: boolean,\n    error: string | undefined,\n    employer: Employer,\n    employers: Employer[]\n}\n\nconst initialState: EmployeeData = {\n    isLoading: false,\n    error: '',\n    employer: {\n        id: '',\n        employee_name: '',\n        employee_salary: '',\n        employee_age: '',\n        profile_image: ''\n    },\n    employers: [{\n        id: '',\n        employee_name: '',\n        employee_salary: '',\n        employee_age: '',\n        profile_image: ''\n    }],\n}\n\nexport const employeeSlice = createSlice({\n    name: 'EMPLOYEE',\n    initialState,\n    reducers: {\n        removeEmployee(state, action) {\n            const newEmployers = state.employers.filter(employer => employer.employee_name !== action.payload);\n            state.employers = newEmployers;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(DummyService.getEmployers.pending, (state) => {\n                state.isLoading = true;\n                state.employers = initialState.employers;\n            })\n            .addCase(DummyService.getEmployers.fulfilled, (state, action) => {\n                state.isLoading = false;\n                console.log(action.payload)\n                state.employers = action.payload;\n            })\n            .addCase(DummyService.getEmployers.rejected, (state,action) => {\n                state.isLoading = false;\n                state.employers = initialState.employers;\n                state.error = action.payload as string;\n            })\n            .addCase(DummyService.getEmployer.pending, (state, action) => {\n                state.isLoading = true;\n                state.employers = initialState.employers;\n            })\n    }\n});\n\nexport const { removeEmployee } = employeeSlice.actions;"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,YAAR,QAA2B,6BAA3B;AAiBA,MAAMC,YAA0B,GAAG;EAC/BC,SAAS,EAAE,KADoB;EAE/BC,KAAK,EAAE,EAFwB;EAG/BC,QAAQ,EAAE;IACNC,EAAE,EAAE,EADE;IAENC,aAAa,EAAE,EAFT;IAGNC,eAAe,EAAE,EAHX;IAINC,YAAY,EAAE,EAJR;IAKNC,aAAa,EAAE;EALT,CAHqB;EAU/BC,SAAS,EAAE,CAAC;IACRL,EAAE,EAAE,EADI;IAERC,aAAa,EAAE,EAFP;IAGRC,eAAe,EAAE,EAHT;IAIRC,YAAY,EAAE,EAJN;IAKRC,aAAa,EAAE;EALP,CAAD;AAVoB,CAAnC;AAmBA,OAAO,MAAME,aAAa,GAAGZ,WAAW,CAAC;EACrCa,IAAI,EAAE,UAD+B;EAErCX,YAFqC;EAGrCY,QAAQ,EAAE;IACNC,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC1B,MAAMC,YAAY,GAAGF,KAAK,CAACL,SAAN,CAAgBQ,MAAhB,CAAuBd,QAAQ,IAAIA,QAAQ,CAACE,aAAT,KAA2BU,MAAM,CAACG,OAArE,CAArB;MACAJ,KAAK,CAACL,SAAN,GAAkBO,YAAlB;IACH;;EAJK,CAH2B;EASrCG,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACatB,YAAY,CAACuB,YAAb,CAA0BC,OADvC,EACiDT,KAAD,IAAW;MACnDA,KAAK,CAACb,SAAN,GAAkB,IAAlB;MACAa,KAAK,CAACL,SAAN,GAAkBT,YAAY,CAACS,SAA/B;IACH,CAJL,EAKKY,OALL,CAKatB,YAAY,CAACuB,YAAb,CAA0BE,SALvC,EAKkD,CAACV,KAAD,EAAQC,MAAR,KAAmB;MAC7DD,KAAK,CAACb,SAAN,GAAkB,KAAlB;MACAwB,OAAO,CAACC,GAAR,CAAYX,MAAM,CAACG,OAAnB;MACAJ,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACG,OAAzB;IACH,CATL,EAUKG,OAVL,CAUatB,YAAY,CAACuB,YAAb,CAA0BK,QAVvC,EAUiD,CAACb,KAAD,EAAOC,MAAP,KAAkB;MAC3DD,KAAK,CAACb,SAAN,GAAkB,KAAlB;MACAa,KAAK,CAACL,SAAN,GAAkBT,YAAY,CAACS,SAA/B;MACAK,KAAK,CAACZ,KAAN,GAAca,MAAM,CAACG,OAArB;IACH,CAdL,EAeKG,OAfL,CAeatB,YAAY,CAAC6B,WAAb,CAAyBL,OAftC,EAe+C,CAACT,KAAD,EAAQC,MAAR,KAAmB;MAC1DD,KAAK,CAACb,SAAN,GAAkB,IAAlB;MACAa,KAAK,CAACL,SAAN,GAAkBT,YAAY,CAACS,SAA/B;IACH,CAlBL;EAmBH;AA7BoC,CAAD,CAAjC;AAgCP,OAAO,MAAM;EAAEI;AAAF,IAAqBH,aAAa,CAACmB,OAAzC"},"metadata":{},"sourceType":"module"}